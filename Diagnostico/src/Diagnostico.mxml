<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:components="com.hillelcoren.components.*"
               minHeight="600" creationComplete="initcreationCompleteHandler(event)">


    <s:layout>
        <s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
    </s:layout>
    <fx:Style source="assets/style.css"/>

    <fx:Script>
		<![CDATA[
        import com.maqzar.constant.NOKConstants;
        import com.maqzar.dtos.DiagnosticoDTO;
        import com.maqzar.dtos.DiagnosticoDetalleDTO;
        import com.maqzar.dtos.EquipoVO;
        import com.maqzar.dtos.SubCategoriaDTO;

        import mx.collections.ArrayCollection;
        import mx.collections.IViewCursor;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.events.ItemClickEvent;
        import mx.formatters.DateFormatter;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.validators.Validator;

        import spark.collections.Sort;
        import spark.collections.SortField;

        [Bindable]
        public var acDiagnostico:ArrayCollection;
        [Bindable]
        public var acEquipo:ArrayCollection;
        [Bindable]
        public var acSubCategoria:ArrayCollection;
        [Bindable]
        public var acDiagnosticoDetalle:ArrayCollection;

        [Bindable]
        public var acEstatus:ArrayCollection = new ArrayCollection([{
            label: "INCOMPLETO",
            estatus: "I"
        }, {label: "COMPLETO", estatus: "C"}]);

        [Bindable]
        public var acEstatusdd:ArrayCollection = new ArrayCollection([{
            label: "FALLA",
            estatus: "FALLA"
        }, {label: "CORRECTO", estatus: "CORRECTO"}]);


        protected var itemSelected:DiagnosticoDTO = new DiagnosticoDTO();
        private var arrayValidationResult:Array;
        private var cursorEstatus:IViewCursor;
        private var cursorEquipo:IViewCursor;
        [Bindable]
        private var isUpdating:Boolean;

        private function doSort(campo:String, arreglo:*):void {
            var sf:SortField = new SortField(campo);
            var s:Sort = new Sort();
            s.fields = [sf];
            arreglo.sort = s;
            arreglo.refresh();
        }

        protected function selectedDiagnostico(event:MouseEvent):void {
            //Obtenemos los diagnostico
            itemSelected = event.currentTarget.selectedItem as DiagnosticoDTO;
            grupoSubDiagnostico.visible = true;

            //cargamos el elemento de equipo por medio de Cursor
            doSort('id_equipo', acEquipo);
            cursorEquipo = acEquipo.createCursor();
            var found:Boolean = cursorEquipo.findAny(itemSelected);
            if (found) {
                autoEquipo.selectedItem = cursorEquipo.current;
            }
            doSort('estatus', acEstatus);
            cursorEstatus = acEstatus.createCursor();
            var foundEstatus = cursorEstatus.findAny(itemSelected);
            if (foundEstatus) {
                ddlEstatus.selectedItem = cursorEstatus.current;
            }
            var formateador:DateFormatter = new DateFormatter();
            formateador.formatString = "YYYY-MM-DD";
            fechaDiagnostico.text = formateador.format(itemSelected.fecha_diagnostico);

            //disparamos el servicio para traer los registros detalle
            acDiagnosticoDetalle = itemSelected.detalle;
            isUpdating = true;
        }

        public function getDiagnosticoEquiporesult(event:ResultEvent):void {
            acDiagnostico = event.result as ArrayCollection;
        }

        private function diagnosticoFault(event:FaultEvent):void {
            trace(event.message);
            Alert.show("No puede conectarse a la base de información");
        }

        private function diagnosticoDetalleFault(event:FaultEvent):void {
            trace(event.message);
            Alert.show("No puede conectarse a la base de información");
        }

        private function insertDiagnosticoEquiporesult(event:ResultEvent):void {
            trace("Result de Insert-->" + event.result);
            trace(event.result);
            if (event.result != null) {
                Alert.show("El registro se agrego correctamente");
                clean();
//                refrescamos el registro
                //limpiamos cajas
                var diagnosticoEquipo:DiagnosticoDTO = new DiagnosticoDTO();
                roDiagnostico.getDiagnosticos(diagnosticoEquipo);
            } else {
                Alert.show("No se puede dar de alta en este momento");
            }
        }

        private function updateDiagnosticoEquiporesult(event:ResultEvent):void {
            if (event.result != null) {
                Alert.show("El registro se actualizó correctamente");
                clean();
//                refrescamos el registro
                //limpiamos cajas
                var diagnosticoEquipo:DiagnosticoDTO = new DiagnosticoDTO();
                roDiagnostico.getDiagnosticos(diagnosticoEquipo);
            } else {
                Alert.show("No se puede actualizar en este momento");
            }
        }

        private function deleteDiagnosticoEquiporesult(event:ResultEvent):void {

        }

        //inicializacion
        protected function initcreationCompleteHandler(event:FlexEvent):void {
            var diagnosticoEquipo:DiagnosticoDTO = new DiagnosticoDTO();
            var infoEquipo:EquipoVO = new EquipoVO();
            var subCategoria:SubCategoriaDTO = new SubCategoriaDTO();
            subCategoria.filterEstatusSubcategoria = "";
            roEquipo.infoEquipo(infoEquipo);
            roCategoria.catSubcategoria(subCategoria);
            roDiagnostico.getDiagnosticos(diagnosticoEquipo);
        }

        private function validateAllInputs():void {
            arrayValidationResult = new Array();
            arrayValidationResult = Validator.validateAll([val_Equipo, val_Fecha, val_SubFalla, val_txtComentario]);
        }

        protected function infoEquipoResult(event:ResultEvent):void {
            acEquipo = event.result as ArrayCollection;
        }

        private function getdiagnosticoDetalleResult(event:ResultEvent):void {
            acDiagnosticoDetalle = event.result as ArrayCollection;
        }

        private function insertDiagnosticoDetalleresult(event:ResultEvent):void {
            // se manda llamar al servicio par aactualizar los datos del datagrid.
            var diagnosticoEquipo:DiagnosticoDTO = new DiagnosticoDTO();
            roDiagnostico.getDiagnosticos(diagnosticoEquipo);
            // se agrega al modelo los valores para poder verlos.
            itemSelected.detalle.addItem(event.result as DiagnosticoDetalleDTO);
            //Limpiamos la caja de detalle:
            autoSubCategoria.text = '';
            txtComentario.text = '';
            rbFallaDetalle.selected = true;
        }

        private function updateDiagnosticoDetalleresult(event:ResultEvent):void {

        }

        private function deleteDiagnosticoDetalleresult(event:ResultEvent):void {

        }

        private function Estatus_ItemClickHandler(event:ItemClickEvent):void {

        }

        private function beforesave():void {
            trace("OK");
        }

        public function saveDiagnostico():void {
            if (!isUpdating) {
                var diagnostico:DiagnosticoDTO = new DiagnosticoDTO();
                diagnostico.id_equipo = EquipoVO(autoEquipo.selectedItem).id_equipo;
                diagnostico.fecha_diagnostico = fechaDiagnostico.text;
                diagnostico.estatus = ddlEstatus.selectedItem.estatus;
                roDiagnostico.insertDiagnostico(diagnostico);
            } else {
                //Actualizamos el registro
                var diagnositicoActualizar:DiagnosticoDTO = new DiagnosticoDTO();
                diagnositicoActualizar = itemSelected;
                diagnositicoActualizar.fecha_diagnostico = fechaDiagnostico.text;
                diagnositicoActualizar.estatus = ddlEstatus.selectedItem.estatus;
                roDiagnostico.updateDiagnostico(diagnositicoActualizar);
            }

        }

        private function clean():void {
            autoEquipo.clear();
            fechaDiagnostico.text = "";
            ddlEstatus.selectedIndex = -1;
            if (acDiagnosticoDetalle != null) {
                acDiagnosticoDetalle.removeAll();
            }
            autoSubCategoria.clear();
            txtComentario.text = "";
            acDiagnostico.refresh();
            rbFallaDetalle.selected = true;
        }

        private function updateItemSelected():void {
            if (autoEquipo.selectedItem != null) {
                itemSelected.id_equipo = EquipoVO(autoEquipo.selectedItem).id_equipo;
            }
            if (fechaDiagnostico.selectedDate != null) {
                var tempDate:Date = fechaDiagnostico.selectedDate;
                if (tempDate != null) {
                    fechaDiagnostico.errorString = "";
                    itemSelected.fecha_diagnostico = tempDate.getFullYear().toString() + "/" + (tempDate.getMonth() + 1).toString() + "/" + tempDate.getDate();
                }
                else {
                    fechaDiagnostico.errorString = "Debes ingresar una fecha";
                }
            }

            var dateAlta:Date = new Date();
            itemSelected.fecha_alta = dateAlta.getFullYear().toString() + "/" + (dateAlta.getMonth() + 1).toString() + "/" + dateAlta.getDate();
        }

        public var detalle:DiagnosticoDetalleDTO = new DiagnosticoDetalleDTO();

        public function saveDiagnosticoDetalle():void {
            if (itemSelected == null) {
                Alert.show("No hay un elemento seleccionado")
            }
            else {
                var detalle:DiagnosticoDetalleDTO = new DiagnosticoDetalleDTO();
                detalle.id_subcategoria = autoSubCategoria.selectedItem.idSubcategoria;
                detalle.estatus = ddlEstatusd.selectedItem.estatus;
                detalle.id_t_diagnostico = itemSelected.id_t_diagnostico;
                detalle.comentario = txtComentario.text;
                detalle.id_empleado = itemSelected.id_empleado;
                roDiagnosticoDetalle.insertDiagnosticoDetalle(detalle);
            }
        }

        private var diagnosticoSelectedToDelete:DiagnosticoDTO;

        private function deleteDiagnostico():void {
            //alert
            Alert.yesLabel = 'Si';
            //objeto = data;
            Alert.show("Estás seguro de borrar el registro?", "", 3, this, shureToDelete);


        }

        public function shureToDelete(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                diagnosticoSelectedToDelete = dataGridListaDiagnostico.selectedItem as DiagnosticoDTO;
                roDiagnostico.deleteDiagnostico(diagnosticoSelectedToDelete);

            }
        }

        private function infoCategoriaResult(event:ResultEvent):void {
            acSubCategoria = event.result as ArrayCollection;

        }

        private function nuevoDiagnosticoClick(event:MouseEvent):void {
            //Limpia
            grupoSubDiagnostico.visible = false;
            clean();
            isUpdating = false;
        }

        public var objeto:Object;

        function borrarDiagnosticoDetalle(data:Object):void {
            //Metodo para borrar el registro
            objeto = data;
            Alert.show("Estás seguro de borrar el registro?", "", 3, this, iamShureToDelete);
        }

        public function iamShureToDelete(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                acDiagnosticoDetalle.removeItemAt(dataGridDiagnosticoDetalle.selectedIndex);
                roDiagnosticoDetalle.deleteDiagnosticoDetalle(objeto as DiagnosticoDetalleDTO);
            }
        }

        public function eliminarDiagnosticoMain(event:CloseEvent):void{
            if(event.detail == Alert.OK){
                acDiagnostico.removeItemAt(dataGridListaDiagnostico.selectedIndex);
                roDiagnostico.deleteDiagnostico(objeto as DiagnosticoDTO);
            }
        }


        ]]>
	</fx:Script>

    <fx:Declarations>


        <!-- REMOTE OBJECTS-->

        <!-- Remote Object para la Alta del Diagnostico -->
        <s:RemoteObject id="roDiagnostico" showBusyCursor="true" destination="equipoBusiness"
                        endpoint="{NOKConstants.SERVICE_URL}"
                        fault="diagnosticoFault(event)">
            <s:method name="getDiagnosticos" result="getDiagnosticoEquiporesult(event)"/>
            <s:method name="insertDiagnostico" result="insertDiagnosticoEquiporesult(event)"/>
            <s:method name="updateDiagnostico" result="updateDiagnosticoEquiporesult(event)"/>
            <s:method name="deleteDiagnostico" result="deleteDiagnosticoEquiporesult(event)"/>
        </s:RemoteObject>
        <!-- End RO Alta Diagnostico -->


        <!-- RO Diagnostico Detalle-->
        <s:RemoteObject id="roDiagnosticoDetalle" destination="equipoBusiness" endpoint="{NOKConstants.SERVICE_URL}"
                        fault="diagnosticoDetalleFault(event)">
            <s:method name="getDiagnosticoDetalle" result="getdiagnosticoDetalleResult(event)"/>
            <s:method name="insertDiagnosticoDetalle" result="insertDiagnosticoDetalleresult(event)"/>
            <s:method name="updateDiagnosticoDetalle" result="updateDiagnosticoDetalleresult(event)"/>
            <s:method name="deleteDiagnosticoDetalle" result="deleteDiagnosticoDetalleresult(event)"/>
        </s:RemoteObject>
        <!--  End Ro Diagnostico Detalle-->


        <!--RO para el Equipo -->
        <s:RemoteObject id="roEquipo" destination="equipoBusiness" endpoint="{NOKConstants.SERVICE_URL}"
                        fault="diagnosticoFault(event)">
            <s:method name="infoEquipo" result="infoEquipoResult(event)"/>
        </s:RemoteObject>
        <!-- End RO Equipo -->


        <!-- RO para la Categoria-->
        <s:RemoteObject id="roCategoria" destination="categoriaBusiness" endpoint="{NOKConstants.SERVICE_URL}"
                        fault="diagnosticoFault(event)">
            <s:method name="catSubcategoria" result="infoCategoriaResult(event)"/>

        </s:RemoteObject>
        <!-- End RO Falla-->

        <s:RadioButtonGroup id="estatusButtonGroup"
                            itemClick="Estatus_ItemClickHandler(event);"/>
        <s:RadioButtonGroup id="estatusdiagnosticoButtonGroup"
                            itemClick="Estatus_ItemClickHandler(event);"/>


        <!-- Validadores -->

        <mx:StringValidator id="val_Equipo"
                            source="{autoEquipo}"
                            property="text"
                            required="true"
                            requiredFieldError="Debes de elejir un Equipo de la lista."/>

        <mx:DateValidator id="val_Fecha"
                          source="{fechaDiagnostico}"
                          property="text"
                          inputFormat="YYYY-MM-DD"
                          required="true"
                          requiredFieldError="Es necesario ingresar una Fecha."/>

        <mx:StringValidator id="val_SubFalla"
                            source="{autoSubCategoria}"
                            property="text"
                            required="true"
                            requiredFieldError="Debes de elejir una SubCategoría de la lista."/>
        <mx:StringValidator id="val_txtComentario"
                            source="{txtComentario}"
                            property="text"
                            required="true"
                            requiredFieldError="Debes ingresar un comentario."/>

        <!-- End Validadores -->

    </fx:Declarations>


    <!-- VIEW APPLICATION-->

    <s:ButtonBar
            width="100%"
            textAlign="center"
            dataProvider="{viewDiagnostico}">
    </s:ButtonBar>
    <mx:ViewStack id="viewDiagnostico" width="100%">
        <s:NavigatorContent
                width="100%"
                label="Diagnostico Princial">
        </s:NavigatorContent>
    </mx:ViewStack>
    <s:Group x="0" y="0" width="100%" height="100%">
        <s:layout>
            <s:HorizontalLayout/>
        </s:layout>

        <!-- Panel Lista de Diagnosticos -->
        <s:Panel width="100%" height="100%" title="Lista de Diagnósticos">
            <s:controlBarContent>
                <s:Button label="Eliminar"
                          click='Alert.show("Estás seguro de borrar el Diagnostico?", "",
            Alert.OK | Alert.CANCEL, this,
            eliminarDiagnosticoMain, null, Alert.OK);'
                />
            </s:controlBarContent>
            <s:DataGrid x="0" y="0" width="100%" height="100%" requestedRowCount="4" id="dataGridListaDiagnostico"
                        doubleClickEnabled="true" doubleClick="selectedDiagnostico(event)"
                        dataProvider="{acDiagnostico}">
                <s:columns>
                    <s:ArrayList>
                        <s:GridColumn dataField="id_t_diagnostico" headerText="FOLIO" width="50"/>
                        <s:GridColumn dataField="numeroeconomico" headerText="Maquinaria"/>
                        <s:GridColumn dataField="fecha_diagnostico" headerText="Fecha de diagnostico"/>
                        <s:GridColumn dataField="estatus" headerText="Estatus">
                            <s:itemRenderer>
                                <fx:Component>
                                    <s:GridItemRenderer>
                                        <mx:Label text="{data.estatus=='C'?'Completo':'Incompleto'}"/>
                                    </s:GridItemRenderer>
                                </fx:Component>
                            </s:itemRenderer>
                        </s:GridColumn>
                        <s:GridColumn dataField="nombreCompleto" headerText="Reporta"/>
                    </s:ArrayList>
                </s:columns>
            </s:DataGrid>
        </s:Panel>
        <!-- End Panel Lista de Diagnosticos -->


        <!--Panel Registro de Diagnostico -->
        <s:Panel width="100%" height="100%" title="Registro de Diagnóstico">
            <s:layout>
                <s:VerticalLayout/>
            </s:layout>

            <!-- Grupo diagnostico -->
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Equipo" width="120" textAlign="right"/>
                <components:AutoComplete id="autoEquipo" width="100%" dataProvider="{acEquipo}"
                                         labelField="numeroeconomico"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Fecha de diagnostico" width="120" textAlign="right"/>
                <mx:DateField id="fechaDiagnostico" yearNavigationEnabled="true" formatString="YYYY-MM-DD"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Estatus" width="120" textAlign="right"/>
                <s:DropDownList id="ddlEstatus" dataProvider="{acEstatus}" labelField="label"
                                prompt="Selecciona un estatus" width="100%"/>
                <!--<s:RadioButton id="rbFalla" selected="true" label="FALLA" value="FALLA" group="{estatusButtonGroup}"/>-->
                <!--<s:RadioButton id="rbCorrecto" label="CORRECTO" value="CORRRECTO" group="{estatusButtonGroup}"/>-->
                <!--<s:RadioButton id="rbIncompleto" label="INCOMPLETO" value="INCOMPLETO" group="{estatusButtonGroup}"/>-->
                <!--<s:RadioButton id="rbCompleto" label="COMPLETO" value="COMPLETO" group="{estatusButtonGroup}"/>-->
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
                <s:Button label="Nuevo Diagnostico" click="nuevoDiagnosticoClick(event)"/>
                <s:Button label="{isUpdating==true?'Actualizar':'Ingresar'}"
                          styleName="primaryButton"
                          click="saveDiagnostico()"
                          enabled="{autoEquipo.selectedItem != null}"
                />
            </s:HGroup>
            <!-- End Grupo Diagnostico-->

            <!-- Grupo Subcategoria -->
            <mx:HRule width="100%"/>
<<<<<<< HEAD
            <s:VGroup id="grupoSubDiagnostico" width="100%" height="100%" visible="false">
                <s:HGroup width="100%" verticalAlign="middle">
                    <s:Label text="Subcategoria" width="120" textAlign="right"/>
                    <components:AutoComplete id="autoSubCategoria" width="100%" dataProvider="{acSubCategoria}"
                                             labelField="subcategoria"/>
                </s:HGroup>
                <s:HGroup width="100%" verticalAlign="middle">
                    <s:Label text="Estatus" width="120" textAlign="right"/>
                    <s:RadioButton id="rbFallaDetalle" selected="true" label="FALLA" value="FALLA"
                                   group="{estatusdiagnosticoButtonGroup}"/>
                    <s:RadioButton id="rbCorrectoDetalle" label="CORRECTO" value="CORRECTO"
                                   group="{estatusdiagnosticoButtonGroup}"/>
                </s:HGroup>

                <s:HGroup width="100%" verticalAlign="middle">
                    <s:Label text="Comentario" width="120" textAlign="right"/>
                    <s:TextArea id="txtComentario" width="100%" height="100"/>
                </s:HGroup>
                <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
                    <s:Button label="Agregar al diagnóstico" styleName="primaryButton"
                              click="saveDiagnosticoDetalle()" enabled="{!autoEquipo.text==''}"/>
                </s:HGroup>

                <!-- End Grupo Subcategoria -->
                <!-- End Registro de Diagnostico-->

                <!-- Lista de Categorias -->
                <s:DataGrid width="100%" height="100%" requestedRowCount="4" id="dataGridDiagnosticoDetalle"
                            dataProvider="{acDiagnosticoDetalle}">
                    <s:columns>
                        <s:ArrayList>
                            <s:GridColumn dataField="categoria" headerText="Categoria"/>
                            <s:GridColumn dataField="subcategoria" headerText="Subcategoria"/>
                            <s:GridColumn dataField="estatus" headerText="Estatus"/>
                            <s:GridColumn dataField="comentario" headerText="Comentario"/>
                            <s:GridColumn headerText="" width="77">
                                <s:itemRenderer>
                                    <fx:Component>
                                        <s:GridItemRenderer>
                                            <s:HGroup horizontalAlign="center">
                                                <s:Button icon="assets/icons/delete.png" width="36"
                                                          click="outerDocument.borrarDiagnosticoDetalle(data)"/>
                                                <!--<s:Button icon="assets/icons/application_form_edit.png" width="36" click="outerDocument.modificarDiagnositoDetalle(data)"/>-->
                                            </s:HGroup>

                                        </s:GridItemRenderer>
                                    </fx:Component>
                                </s:itemRenderer>
                            </s:GridColumn>
                        </s:ArrayList>
                    </s:columns>
                </s:DataGrid>
            </s:VGroup>
=======
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Subcategoria" width="120" textAlign="right"/>
                <components:AutoComplete id="autoSubCategoria" width="100%" dataProvider="{acSubCategoria}"
                                         labelField="subcategoria"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Estatus" width="120" textAlign="right"/>
                <!--<s:RadioButton id="rbFallaDetalle" selected="true" label="FALLA" value="FALLA"
                               group="{estatusdiagnosticoButtonGroup}"/>
                <s:RadioButton id="rbCorrectoDetalle" label="CORRECTO" value="CORRECTO"
                               group="{estatusdiagnosticoButtonGroup}"/>-->
                <s:DropDownList id="ddlEstatusd" dataProvider="{acEstatusdd}" labelField="label"
                                prompt="Selecciona un estatus" width="100%"/>
            </s:HGroup>

            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label text="Comentario" width="120" textAlign="right"/>
                <s:TextArea id="txtComentario" width="100%" height="100"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
                <s:Button label="Agregar al diagnóstico" styleName="primaryButton"
                          click="saveDiagnosticoDetalle()"/>
            </s:HGroup>
            <!-- End Grupo Subcategoria -->
            <!-- End Registro de Diagnostico-->

            <!-- Lista de Categorias -->
            <s:DataGrid width="100%" height="100%" requestedRowCount="4" id="dataGridDiagnosticoDetalle"
                        dataProvider="{acDiagnosticoDetalle}">
                <s:columns>
                    <s:ArrayList>
                        <s:GridColumn dataField="categoria" headerText="Categoria"/>
                        <s:GridColumn dataField="subcategoria" headerText="Subcategoria"/>
                        <s:GridColumn dataField="estatus" headerText="Estatus"/>
                        <s:GridColumn dataField="comentario" headerText="Comentario"/>
                        <s:GridColumn headerText="" width="77">
                            <s:itemRenderer>
                                <fx:Component>
                                    <s:GridItemRenderer>
                                        <s:HGroup horizontalAlign="center">
                                            <s:Button icon="assets/icons/delete.png" width="36" click="outerDocument.borrarDiagnosticoDetalle(data)"/>
                                            <!--<s:Button icon="assets/icons/application_form_edit.png" width="36" click="outerDocument.modificarDiagnositoDetalle(data)"/>-->
                                        </s:HGroup>

                                    </s:GridItemRenderer>
                                </fx:Component>
                            </s:itemRenderer>
                        </s:GridColumn>
                    </s:ArrayList>
                </s:columns>
            </s:DataGrid>
>>>>>>> origin/master
            <!-- End Lista de Categorias -->
        </s:Panel>
        <!-- End Panel Registro de Diagnostico -->
    </s:Group>
</s:Application>
        <!-- END VIEW APPLICATION-->